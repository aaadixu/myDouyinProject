// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	user "douyinProject/relation/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FollowCountMethod":   kitex.NewMethodInfo(followCountMethodHandler, newUserServiceFollowCountMethodArgs, newUserServiceFollowCountMethodResult, false),
		"FollowerCountMethod": kitex.NewMethodInfo(followerCountMethodHandler, newUserServiceFollowerCountMethodArgs, newUserServiceFollowerCountMethodResult, false),
		"InfosMethod":         kitex.NewMethodInfo(infosMethodHandler, newUserServiceInfosMethodArgs, newUserServiceInfosMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func followCountMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFollowCountMethodArgs)
	realResult := result.(*user.UserServiceFollowCountMethodResult)
	success, err := handler.(user.UserService).FollowCountMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowCountMethodArgs() interface{} {
	return user.NewUserServiceFollowCountMethodArgs()
}

func newUserServiceFollowCountMethodResult() interface{} {
	return user.NewUserServiceFollowCountMethodResult()
}

func followerCountMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFollowerCountMethodArgs)
	realResult := result.(*user.UserServiceFollowerCountMethodResult)
	success, err := handler.(user.UserService).FollowerCountMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowerCountMethodArgs() interface{} {
	return user.NewUserServiceFollowerCountMethodArgs()
}

func newUserServiceFollowerCountMethodResult() interface{} {
	return user.NewUserServiceFollowerCountMethodResult()
}

func infosMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceInfosMethodArgs)
	realResult := result.(*user.UserServiceInfosMethodResult)
	success, err := handler.(user.UserService).InfosMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceInfosMethodArgs() interface{} {
	return user.NewUserServiceInfosMethodArgs()
}

func newUserServiceInfosMethodResult() interface{} {
	return user.NewUserServiceInfosMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FollowCountMethod(ctx context.Context, request *user.FollowCountReq) (r *user.FollowCountResp, err error) {
	var _args user.UserServiceFollowCountMethodArgs
	_args.Request = request
	var _result user.UserServiceFollowCountMethodResult
	if err = p.c.Call(ctx, "FollowCountMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerCountMethod(ctx context.Context, request *user.FollowerCountReq) (r *user.FollowerCountResp, err error) {
	var _args user.UserServiceFollowerCountMethodArgs
	_args.Request = request
	var _result user.UserServiceFollowerCountMethodResult
	if err = p.c.Call(ctx, "FollowerCountMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InfosMethod(ctx context.Context, request *user.InfosReq) (r *user.InfosResp, err error) {
	var _args user.UserServiceInfosMethodArgs
	_args.Request = request
	var _result user.UserServiceInfosMethodResult
	if err = p.c.Call(ctx, "InfosMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
