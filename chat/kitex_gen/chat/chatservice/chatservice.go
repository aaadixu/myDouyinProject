// Code generated by Kitex v0.4.4. DO NOT EDIT.

package chatservice

import (
	"context"
	chat "douyinProject/chat/kitex_gen/chat"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return chatServiceServiceInfo
}

var chatServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ChatService"
	handlerType := (*chat.ChatService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ChatMethod":   kitex.NewMethodInfo(chatMethodHandler, newChatServiceChatMethodArgs, newChatServiceChatMethodResult, false),
		"ActionMethod": kitex.NewMethodInfo(actionMethodHandler, newChatServiceActionMethodArgs, newChatServiceActionMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "chat",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func chatMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceChatMethodArgs)
	realResult := result.(*chat.ChatServiceChatMethodResult)
	success, err := handler.(chat.ChatService).ChatMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceChatMethodArgs() interface{} {
	return chat.NewChatServiceChatMethodArgs()
}

func newChatServiceChatMethodResult() interface{} {
	return chat.NewChatServiceChatMethodResult()
}

func actionMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*chat.ChatServiceActionMethodArgs)
	realResult := result.(*chat.ChatServiceActionMethodResult)
	success, err := handler.(chat.ChatService).ActionMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newChatServiceActionMethodArgs() interface{} {
	return chat.NewChatServiceActionMethodArgs()
}

func newChatServiceActionMethodResult() interface{} {
	return chat.NewChatServiceActionMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ChatMethod(ctx context.Context, request *chat.ChatReq) (r *chat.ChatResp, err error) {
	var _args chat.ChatServiceChatMethodArgs
	_args.Request = request
	var _result chat.ChatServiceChatMethodResult
	if err = p.c.Call(ctx, "ChatMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ActionMethod(ctx context.Context, request *chat.ActionReq) (r *chat.ActionResp, err error) {
	var _args chat.ChatServiceActionMethodArgs
	_args.Request = request
	var _result chat.ChatServiceActionMethodResult
	if err = p.c.Call(ctx, "ActionMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
