// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	user "douyinProject/user/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	RegistMethod(ctx context.Context, request *user.RegistReq, callOptions ...callopt.Option) (r *user.RegistResp, err error)
	LoginMethod(ctx context.Context, request *user.LoginReq, callOptions ...callopt.Option) (r *user.LoginResp, err error)
	InfoMethod(ctx context.Context, request *user.InfoReq, callOptions ...callopt.Option) (r *user.InfoResp, err error)
	AddWorkNumMethod(ctx context.Context, request *user.AddWorkNumReq, callOptions ...callopt.Option) (r *user.AddWorkNumResp, err error)
	FavoriteCountMethod(ctx context.Context, request *user.FavoriteCountReq, callOptions ...callopt.Option) (r *user.FavoriteCountResp, err error)
	TotalFavoritedMethod(ctx context.Context, request *user.TotalFavoritedReq, callOptions ...callopt.Option) (r *user.TotalFavoritedResp, err error)
	FollowCountMethod(ctx context.Context, request *user.FollowCountReq, callOptions ...callopt.Option) (r *user.FollowCountResp, err error)
	FollowerCountMethod(ctx context.Context, request *user.FollowerCountReq, callOptions ...callopt.Option) (r *user.FollowerCountResp, err error)
	InfosMethod(ctx context.Context, request *user.InfosReq, callOptions ...callopt.Option) (r *user.InfosResp, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) RegistMethod(ctx context.Context, request *user.RegistReq, callOptions ...callopt.Option) (r *user.RegistResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RegistMethod(ctx, request)
}

func (p *kUserServiceClient) LoginMethod(ctx context.Context, request *user.LoginReq, callOptions ...callopt.Option) (r *user.LoginResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.LoginMethod(ctx, request)
}

func (p *kUserServiceClient) InfoMethod(ctx context.Context, request *user.InfoReq, callOptions ...callopt.Option) (r *user.InfoResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InfoMethod(ctx, request)
}

func (p *kUserServiceClient) AddWorkNumMethod(ctx context.Context, request *user.AddWorkNumReq, callOptions ...callopt.Option) (r *user.AddWorkNumResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddWorkNumMethod(ctx, request)
}

func (p *kUserServiceClient) FavoriteCountMethod(ctx context.Context, request *user.FavoriteCountReq, callOptions ...callopt.Option) (r *user.FavoriteCountResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteCountMethod(ctx, request)
}

func (p *kUserServiceClient) TotalFavoritedMethod(ctx context.Context, request *user.TotalFavoritedReq, callOptions ...callopt.Option) (r *user.TotalFavoritedResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.TotalFavoritedMethod(ctx, request)
}

func (p *kUserServiceClient) FollowCountMethod(ctx context.Context, request *user.FollowCountReq, callOptions ...callopt.Option) (r *user.FollowCountResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowCountMethod(ctx, request)
}

func (p *kUserServiceClient) FollowerCountMethod(ctx context.Context, request *user.FollowerCountReq, callOptions ...callopt.Option) (r *user.FollowerCountResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowerCountMethod(ctx, request)
}

func (p *kUserServiceClient) InfosMethod(ctx context.Context, request *user.InfosReq, callOptions ...callopt.Option) (r *user.InfosResp, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InfosMethod(ctx, request)
}
