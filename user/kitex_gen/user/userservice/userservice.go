// Code generated by Kitex v0.4.4. DO NOT EDIT.

package userservice

import (
	"context"
	user "douyinProject/user/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RegistMethod":         kitex.NewMethodInfo(registMethodHandler, newUserServiceRegistMethodArgs, newUserServiceRegistMethodResult, false),
		"LoginMethod":          kitex.NewMethodInfo(loginMethodHandler, newUserServiceLoginMethodArgs, newUserServiceLoginMethodResult, false),
		"InfoMethod":           kitex.NewMethodInfo(infoMethodHandler, newUserServiceInfoMethodArgs, newUserServiceInfoMethodResult, false),
		"AddWorkNumMethod":     kitex.NewMethodInfo(addWorkNumMethodHandler, newUserServiceAddWorkNumMethodArgs, newUserServiceAddWorkNumMethodResult, false),
		"FavoriteCountMethod":  kitex.NewMethodInfo(favoriteCountMethodHandler, newUserServiceFavoriteCountMethodArgs, newUserServiceFavoriteCountMethodResult, false),
		"TotalFavoritedMethod": kitex.NewMethodInfo(totalFavoritedMethodHandler, newUserServiceTotalFavoritedMethodArgs, newUserServiceTotalFavoritedMethodResult, false),
		"FollowCountMethod":    kitex.NewMethodInfo(followCountMethodHandler, newUserServiceFollowCountMethodArgs, newUserServiceFollowCountMethodResult, false),
		"FollowerCountMethod":  kitex.NewMethodInfo(followerCountMethodHandler, newUserServiceFollowerCountMethodArgs, newUserServiceFollowerCountMethodResult, false),
		"InfosMethod":          kitex.NewMethodInfo(infosMethodHandler, newUserServiceInfosMethodArgs, newUserServiceInfosMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func registMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRegistMethodArgs)
	realResult := result.(*user.UserServiceRegistMethodResult)
	success, err := handler.(user.UserService).RegistMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegistMethodArgs() interface{} {
	return user.NewUserServiceRegistMethodArgs()
}

func newUserServiceRegistMethodResult() interface{} {
	return user.NewUserServiceRegistMethodResult()
}

func loginMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginMethodArgs)
	realResult := result.(*user.UserServiceLoginMethodResult)
	success, err := handler.(user.UserService).LoginMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginMethodArgs() interface{} {
	return user.NewUserServiceLoginMethodArgs()
}

func newUserServiceLoginMethodResult() interface{} {
	return user.NewUserServiceLoginMethodResult()
}

func infoMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceInfoMethodArgs)
	realResult := result.(*user.UserServiceInfoMethodResult)
	success, err := handler.(user.UserService).InfoMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceInfoMethodArgs() interface{} {
	return user.NewUserServiceInfoMethodArgs()
}

func newUserServiceInfoMethodResult() interface{} {
	return user.NewUserServiceInfoMethodResult()
}

func addWorkNumMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceAddWorkNumMethodArgs)
	realResult := result.(*user.UserServiceAddWorkNumMethodResult)
	success, err := handler.(user.UserService).AddWorkNumMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceAddWorkNumMethodArgs() interface{} {
	return user.NewUserServiceAddWorkNumMethodArgs()
}

func newUserServiceAddWorkNumMethodResult() interface{} {
	return user.NewUserServiceAddWorkNumMethodResult()
}

func favoriteCountMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFavoriteCountMethodArgs)
	realResult := result.(*user.UserServiceFavoriteCountMethodResult)
	success, err := handler.(user.UserService).FavoriteCountMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFavoriteCountMethodArgs() interface{} {
	return user.NewUserServiceFavoriteCountMethodArgs()
}

func newUserServiceFavoriteCountMethodResult() interface{} {
	return user.NewUserServiceFavoriteCountMethodResult()
}

func totalFavoritedMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceTotalFavoritedMethodArgs)
	realResult := result.(*user.UserServiceTotalFavoritedMethodResult)
	success, err := handler.(user.UserService).TotalFavoritedMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceTotalFavoritedMethodArgs() interface{} {
	return user.NewUserServiceTotalFavoritedMethodArgs()
}

func newUserServiceTotalFavoritedMethodResult() interface{} {
	return user.NewUserServiceTotalFavoritedMethodResult()
}

func followCountMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFollowCountMethodArgs)
	realResult := result.(*user.UserServiceFollowCountMethodResult)
	success, err := handler.(user.UserService).FollowCountMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowCountMethodArgs() interface{} {
	return user.NewUserServiceFollowCountMethodArgs()
}

func newUserServiceFollowCountMethodResult() interface{} {
	return user.NewUserServiceFollowCountMethodResult()
}

func followerCountMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceFollowerCountMethodArgs)
	realResult := result.(*user.UserServiceFollowerCountMethodResult)
	success, err := handler.(user.UserService).FollowerCountMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceFollowerCountMethodArgs() interface{} {
	return user.NewUserServiceFollowerCountMethodArgs()
}

func newUserServiceFollowerCountMethodResult() interface{} {
	return user.NewUserServiceFollowerCountMethodResult()
}

func infosMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceInfosMethodArgs)
	realResult := result.(*user.UserServiceInfosMethodResult)
	success, err := handler.(user.UserService).InfosMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceInfosMethodArgs() interface{} {
	return user.NewUserServiceInfosMethodArgs()
}

func newUserServiceInfosMethodResult() interface{} {
	return user.NewUserServiceInfosMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RegistMethod(ctx context.Context, request *user.RegistReq) (r *user.RegistResp, err error) {
	var _args user.UserServiceRegistMethodArgs
	_args.Request = request
	var _result user.UserServiceRegistMethodResult
	if err = p.c.Call(ctx, "RegistMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginMethod(ctx context.Context, request *user.LoginReq) (r *user.LoginResp, err error) {
	var _args user.UserServiceLoginMethodArgs
	_args.Request = request
	var _result user.UserServiceLoginMethodResult
	if err = p.c.Call(ctx, "LoginMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InfoMethod(ctx context.Context, request *user.InfoReq) (r *user.InfoResp, err error) {
	var _args user.UserServiceInfoMethodArgs
	_args.Request = request
	var _result user.UserServiceInfoMethodResult
	if err = p.c.Call(ctx, "InfoMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddWorkNumMethod(ctx context.Context, request *user.AddWorkNumReq) (r *user.AddWorkNumResp, err error) {
	var _args user.UserServiceAddWorkNumMethodArgs
	_args.Request = request
	var _result user.UserServiceAddWorkNumMethodResult
	if err = p.c.Call(ctx, "AddWorkNumMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteCountMethod(ctx context.Context, request *user.FavoriteCountReq) (r *user.FavoriteCountResp, err error) {
	var _args user.UserServiceFavoriteCountMethodArgs
	_args.Request = request
	var _result user.UserServiceFavoriteCountMethodResult
	if err = p.c.Call(ctx, "FavoriteCountMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TotalFavoritedMethod(ctx context.Context, request *user.TotalFavoritedReq) (r *user.TotalFavoritedResp, err error) {
	var _args user.UserServiceTotalFavoritedMethodArgs
	_args.Request = request
	var _result user.UserServiceTotalFavoritedMethodResult
	if err = p.c.Call(ctx, "TotalFavoritedMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowCountMethod(ctx context.Context, request *user.FollowCountReq) (r *user.FollowCountResp, err error) {
	var _args user.UserServiceFollowCountMethodArgs
	_args.Request = request
	var _result user.UserServiceFollowCountMethodResult
	if err = p.c.Call(ctx, "FollowCountMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerCountMethod(ctx context.Context, request *user.FollowerCountReq) (r *user.FollowerCountResp, err error) {
	var _args user.UserServiceFollowerCountMethodArgs
	_args.Request = request
	var _result user.UserServiceFollowerCountMethodResult
	if err = p.c.Call(ctx, "FollowerCountMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) InfosMethod(ctx context.Context, request *user.InfosReq) (r *user.InfosResp, err error) {
	var _args user.UserServiceInfosMethodArgs
	_args.Request = request
	var _result user.UserServiceInfosMethodResult
	if err = p.c.Call(ctx, "InfosMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
