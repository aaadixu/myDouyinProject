// Code generated by thriftgo (0.2.7). DO NOT EDIT.

package action

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type IsUserFavoriteVideoReq struct {
	VideoId int64 `thrift:"video_id,1" frugal:"1,default,i64" json:"video_id"`
	UserId  int64 `thrift:"user_id,2" frugal:"2,default,i64" json:"user_id"`
}

func NewIsUserFavoriteVideoReq() *IsUserFavoriteVideoReq {
	return &IsUserFavoriteVideoReq{}
}

func (p *IsUserFavoriteVideoReq) InitDefault() {
	*p = IsUserFavoriteVideoReq{}
}

func (p *IsUserFavoriteVideoReq) GetVideoId() (v int64) {
	return p.VideoId
}

func (p *IsUserFavoriteVideoReq) GetUserId() (v int64) {
	return p.UserId
}
func (p *IsUserFavoriteVideoReq) SetVideoId(val int64) {
	p.VideoId = val
}
func (p *IsUserFavoriteVideoReq) SetUserId(val int64) {
	p.UserId = val
}

var fieldIDToName_IsUserFavoriteVideoReq = map[int16]string{
	1: "video_id",
	2: "user_id",
}

func (p *IsUserFavoriteVideoReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IsUserFavoriteVideoReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IsUserFavoriteVideoReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *IsUserFavoriteVideoReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}

func (p *IsUserFavoriteVideoReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IsUserFavoriteVideoReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IsUserFavoriteVideoReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VideoId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IsUserFavoriteVideoReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *IsUserFavoriteVideoReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsUserFavoriteVideoReq(%+v)", *p)
}

func (p *IsUserFavoriteVideoReq) DeepEqual(ano *IsUserFavoriteVideoReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserId) {
		return false
	}
	return true
}

func (p *IsUserFavoriteVideoReq) Field1DeepEqual(src int64) bool {

	if p.VideoId != src {
		return false
	}
	return true
}
func (p *IsUserFavoriteVideoReq) Field2DeepEqual(src int64) bool {

	if p.UserId != src {
		return false
	}
	return true
}

type IsUserFavoriteVideoResp struct {
	StatusCode int32  `thrift:"status_code,1" frugal:"1,default,i32" json:"status_code"`
	StatusMsg  string `thrift:"status_msg,2" frugal:"2,default,string" json:"status_msg"`
	IsFavorite bool   `thrift:"is_favorite,3" frugal:"3,default,bool" json:"is_favorite"`
}

func NewIsUserFavoriteVideoResp() *IsUserFavoriteVideoResp {
	return &IsUserFavoriteVideoResp{}
}

func (p *IsUserFavoriteVideoResp) InitDefault() {
	*p = IsUserFavoriteVideoResp{}
}

func (p *IsUserFavoriteVideoResp) GetStatusCode() (v int32) {
	return p.StatusCode
}

func (p *IsUserFavoriteVideoResp) GetStatusMsg() (v string) {
	return p.StatusMsg
}

func (p *IsUserFavoriteVideoResp) GetIsFavorite() (v bool) {
	return p.IsFavorite
}
func (p *IsUserFavoriteVideoResp) SetStatusCode(val int32) {
	p.StatusCode = val
}
func (p *IsUserFavoriteVideoResp) SetStatusMsg(val string) {
	p.StatusMsg = val
}
func (p *IsUserFavoriteVideoResp) SetIsFavorite(val bool) {
	p.IsFavorite = val
}

var fieldIDToName_IsUserFavoriteVideoResp = map[int16]string{
	1: "status_code",
	2: "status_msg",
	3: "is_favorite",
}

func (p *IsUserFavoriteVideoResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IsUserFavoriteVideoResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IsUserFavoriteVideoResp) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.StatusCode = v
	}
	return nil
}

func (p *IsUserFavoriteVideoResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.StatusMsg = v
	}
	return nil
}

func (p *IsUserFavoriteVideoResp) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsFavorite = v
	}
	return nil
}

func (p *IsUserFavoriteVideoResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IsUserFavoriteVideoResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IsUserFavoriteVideoResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status_code", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StatusCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *IsUserFavoriteVideoResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status_msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.StatusMsg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *IsUserFavoriteVideoResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_favorite", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsFavorite); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *IsUserFavoriteVideoResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsUserFavoriteVideoResp(%+v)", *p)
}

func (p *IsUserFavoriteVideoResp) DeepEqual(ano *IsUserFavoriteVideoResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StatusCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.StatusMsg) {
		return false
	}
	if !p.Field3DeepEqual(ano.IsFavorite) {
		return false
	}
	return true
}

func (p *IsUserFavoriteVideoResp) Field1DeepEqual(src int32) bool {

	if p.StatusCode != src {
		return false
	}
	return true
}
func (p *IsUserFavoriteVideoResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.StatusMsg, src) != 0 {
		return false
	}
	return true
}
func (p *IsUserFavoriteVideoResp) Field3DeepEqual(src bool) bool {

	if p.IsFavorite != src {
		return false
	}
	return true
}

type ActionService interface {
	IsUserFavoriteVideoMethod(ctx context.Context, request *IsUserFavoriteVideoReq) (r *IsUserFavoriteVideoResp, err error)
}

type ActionServiceClient struct {
	c thrift.TClient
}

func NewActionServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ActionServiceClient {
	return &ActionServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewActionServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ActionServiceClient {
	return &ActionServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewActionServiceClient(c thrift.TClient) *ActionServiceClient {
	return &ActionServiceClient{
		c: c,
	}
}

func (p *ActionServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ActionServiceClient) IsUserFavoriteVideoMethod(ctx context.Context, request *IsUserFavoriteVideoReq) (r *IsUserFavoriteVideoResp, err error) {
	var _args ActionServiceIsUserFavoriteVideoMethodArgs
	_args.Request = request
	var _result ActionServiceIsUserFavoriteVideoMethodResult
	if err = p.Client_().Call(ctx, "IsUserFavoriteVideoMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ActionServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ActionService
}

func (p *ActionServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ActionServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ActionServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewActionServiceProcessor(handler ActionService) *ActionServiceProcessor {
	self := &ActionServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("IsUserFavoriteVideoMethod", &actionServiceProcessorIsUserFavoriteVideoMethod{handler: handler})
	return self
}
func (p *ActionServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type actionServiceProcessorIsUserFavoriteVideoMethod struct {
	handler ActionService
}

func (p *actionServiceProcessorIsUserFavoriteVideoMethod) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ActionServiceIsUserFavoriteVideoMethodArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("IsUserFavoriteVideoMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ActionServiceIsUserFavoriteVideoMethodResult{}
	var retval *IsUserFavoriteVideoResp
	if retval, err2 = p.handler.IsUserFavoriteVideoMethod(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IsUserFavoriteVideoMethod: "+err2.Error())
		oprot.WriteMessageBegin("IsUserFavoriteVideoMethod", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("IsUserFavoriteVideoMethod", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ActionServiceIsUserFavoriteVideoMethodArgs struct {
	Request *IsUserFavoriteVideoReq `thrift:"request,1" frugal:"1,default,IsUserFavoriteVideoReq" json:"request"`
}

func NewActionServiceIsUserFavoriteVideoMethodArgs() *ActionServiceIsUserFavoriteVideoMethodArgs {
	return &ActionServiceIsUserFavoriteVideoMethodArgs{}
}

func (p *ActionServiceIsUserFavoriteVideoMethodArgs) InitDefault() {
	*p = ActionServiceIsUserFavoriteVideoMethodArgs{}
}

var ActionServiceIsUserFavoriteVideoMethodArgs_Request_DEFAULT *IsUserFavoriteVideoReq

func (p *ActionServiceIsUserFavoriteVideoMethodArgs) GetRequest() (v *IsUserFavoriteVideoReq) {
	if !p.IsSetRequest() {
		return ActionServiceIsUserFavoriteVideoMethodArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *ActionServiceIsUserFavoriteVideoMethodArgs) SetRequest(val *IsUserFavoriteVideoReq) {
	p.Request = val
}

var fieldIDToName_ActionServiceIsUserFavoriteVideoMethodArgs = map[int16]string{
	1: "request",
}

func (p *ActionServiceIsUserFavoriteVideoMethodArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *ActionServiceIsUserFavoriteVideoMethodArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ActionServiceIsUserFavoriteVideoMethodArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ActionServiceIsUserFavoriteVideoMethodArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewIsUserFavoriteVideoReq()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ActionServiceIsUserFavoriteVideoMethodArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IsUserFavoriteVideoMethod_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ActionServiceIsUserFavoriteVideoMethodArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ActionServiceIsUserFavoriteVideoMethodArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActionServiceIsUserFavoriteVideoMethodArgs(%+v)", *p)
}

func (p *ActionServiceIsUserFavoriteVideoMethodArgs) DeepEqual(ano *ActionServiceIsUserFavoriteVideoMethodArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *ActionServiceIsUserFavoriteVideoMethodArgs) Field1DeepEqual(src *IsUserFavoriteVideoReq) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type ActionServiceIsUserFavoriteVideoMethodResult struct {
	Success *IsUserFavoriteVideoResp `thrift:"success,0,optional" frugal:"0,optional,IsUserFavoriteVideoResp" json:"success,omitempty"`
}

func NewActionServiceIsUserFavoriteVideoMethodResult() *ActionServiceIsUserFavoriteVideoMethodResult {
	return &ActionServiceIsUserFavoriteVideoMethodResult{}
}

func (p *ActionServiceIsUserFavoriteVideoMethodResult) InitDefault() {
	*p = ActionServiceIsUserFavoriteVideoMethodResult{}
}

var ActionServiceIsUserFavoriteVideoMethodResult_Success_DEFAULT *IsUserFavoriteVideoResp

func (p *ActionServiceIsUserFavoriteVideoMethodResult) GetSuccess() (v *IsUserFavoriteVideoResp) {
	if !p.IsSetSuccess() {
		return ActionServiceIsUserFavoriteVideoMethodResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ActionServiceIsUserFavoriteVideoMethodResult) SetSuccess(x interface{}) {
	p.Success = x.(*IsUserFavoriteVideoResp)
}

var fieldIDToName_ActionServiceIsUserFavoriteVideoMethodResult = map[int16]string{
	0: "success",
}

func (p *ActionServiceIsUserFavoriteVideoMethodResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ActionServiceIsUserFavoriteVideoMethodResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ActionServiceIsUserFavoriteVideoMethodResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ActionServiceIsUserFavoriteVideoMethodResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewIsUserFavoriteVideoResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ActionServiceIsUserFavoriteVideoMethodResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IsUserFavoriteVideoMethod_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ActionServiceIsUserFavoriteVideoMethodResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ActionServiceIsUserFavoriteVideoMethodResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActionServiceIsUserFavoriteVideoMethodResult(%+v)", *p)
}

func (p *ActionServiceIsUserFavoriteVideoMethodResult) DeepEqual(ano *ActionServiceIsUserFavoriteVideoMethodResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ActionServiceIsUserFavoriteVideoMethodResult) Field0DeepEqual(src *IsUserFavoriteVideoResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
