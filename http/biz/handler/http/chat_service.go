// Code generated by hertz generator.

package http

import (
	"context"
	jwt "douyinProject/http/biz/mw"
	"douyinProject/http/biz/rpc"
	"douyinProject/http/kitex_gen/httprpc"
	"fmt"

	http "douyinProject/http/biz/model/http"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// MessageSendMethod .
// @router /douyin/message/action/ [POST]
func MessageSendMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req http.MessageSendReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(http.MessageSendResp)

	res, err := jwt.AuthToken(ctx, c)
	if err != nil || res == -1 { // token校验失败
		msg := "auth fail"
		resp.StatusCode = 2
		resp.StatusMsg = &msg
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	rpcResp, err := rpc.ChatClient.ActionMethod(ctx, &httprpc.ActionReq{
		UserId:     res,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
		Content:    req.Content,
	})

	if err != nil {
		resp.StatusCode = rpcResp.StatusCode
		resp.StatusMsg = &rpcResp.StatusMsg

		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// MessageChatMethod .
// @router /douyin/message/chat/ [GET]
func MessageChatMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req http.MessageChatReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(http.MessageChatResp)

	res, err := jwt.AuthToken(ctx, c)
	if err != nil || res == -1 { // token校验失败
		msg := "auth fail"
		resp.StatusCode = 2
		resp.StatusMsg = &msg
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	fmt.Println("---------------------------------")
	fmt.Println(res, req.ToUserID)
	fmt.Println("---------------------------------")

	rpcResp, err := rpc.ChatClient.ChatMethod(ctx, &httprpc.ChatReq{
		UserId:     res,
		ToUserId:   req.ToUserID,
		PreMsgTime: req.PreMsgTime,
	})
	resp.StatusCode = rpcResp.StatusCode
	resp.StatusMsg = &rpcResp.StatusMsg
	if err != nil {
		c.JSON(consts.StatusOK, resp)
	}

	messages := rpc.Packmessages(rpcResp.MessageList)

	resp.MessageList = messages
	c.JSON(consts.StatusOK, resp)
}
