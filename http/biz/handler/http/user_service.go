// Code generated by hertz generator.

package http

import (
	"context"
	"douyinProject/http/biz/model/http"
	jwt "douyinProject/http/biz/mw"
	"douyinProject/http/biz/rpc"
	"douyinProject/http/kitex_gen/httprpc"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RegistMethod .
// @router /douyin/user/register/ [POST]
func RegistMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req http.RegistReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(http.RegistResp)
	rpcResp, err := rpc.UserClient.RegistMethod(ctx, &httprpc.RegistReq{
		Username: req.Name,
		Password: req.Password,
	})
	resp.StatusCode = rpcResp.StatusCode
	resp.StatusMsg = rpcResp.StatusMsg
	resp.UserID = rpcResp.UserId
	if err != nil {
		c.JSON(consts.StatusNotFound, resp)
	} else {
		token, _, _ := jwt.JwtMiddleware.TokenGenerator(&http.User{
			ID: rpcResp.UserId,
		})
		resp.Token = token
		c.JSON(consts.StatusOK, resp)
	}
}

// LoginMethod .
// @router /douyin/user/login/ [POST]
func LoginMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req http.LoginReq
	err = c.BindAndValidate(&req)

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(http.LoginResp)

	rpcResp, err := rpc.UserClient.LoginMethod(ctx, &httprpc.LoginReq{
		Username: req.Name,
		Password: req.Password,
	})

	if err != nil {
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, &resp)
	} else {
		resp.StatusMsg = rpcResp.StatusMsg
		resp.UserID = rpcResp.UserId
		resp.StatusCode = rpcResp.StatusCode
		token, _, _ := jwt.JwtMiddleware.TokenGenerator(&http.User{
			ID: rpcResp.UserId,
		})
		resp.Token = token
		c.JSON(consts.StatusOK, &resp)
	}
}

// InfoMethod .
// @router /douyin/user/ [GET]
func InfoMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req http.InfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(http.InfoResp)

	// 首先根据token判断用户的登录状态是否存在异常
	rs, err := jwt.AuthToken(ctx, c)
	if err != nil || rs == -1 { // 校验失败
		resp.StatusCode = 2
		resp.StatusMsg = "auth fail"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	rpcResp, err := rpc.UserClient.InfoMethod(ctx, &httprpc.InfoReq{UserId: req.UserID})
	if err != nil {
		c.JSON(consts.StatusBadRequest, resp)
	} else {
		resp.StatusMsg = rpcResp.StatusMsg
		resp.StatusCode = rpcResp.StatusCode

		var resUser http.User

		resUser.ID = rpcResp.User.Id
		resUser.WorkCount = rpcResp.User.WorkCount
		resUser.Name = rpcResp.User.Name
		resUser.FavoriteCount = rpcResp.User.FavoriteCount
		resUser.FollowerCount = rpcResp.User.FollowerCount
		resUser.FollowCount = rpcResp.User.FollowCount
		resUser.TotalFavorited = rpcResp.User.TotalFavorited
		resUser.Avatar = rpcResp.User.Avatar
		resUser.BackgroundImage = rpcResp.User.BackgroundImage
		resUser.Signature = rpcResp.User.Signature
		resUser.IsFollow = rpcResp.User.IsFollow

		resp.User = &resUser

		c.JSON(consts.StatusOK, resp)
	}

}
