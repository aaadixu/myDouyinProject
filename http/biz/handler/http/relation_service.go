// Code generated by hertz generator.

package http

import (
	"context"
	http "douyinProject/http/biz/model/http"
	jwt "douyinProject/http/biz/mw"
	"douyinProject/http/biz/rpc"
	"douyinProject/http/kitex_gen/httprpc"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationActionMethod .
// @router /douyin/relation/action/ [POST]
func RelationActionMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req http.RelationActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(http.RelationActionResp)

	res, err := jwt.AuthToken(ctx, c)
	if err != nil || res == -1 { // token校验失败
		msg := "auth fail"
		resp.StatusCode = 2
		resp.StatusMsg = &msg
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	rpcResp, err := rpc.RelationClient.RelationActionMethod(ctx, &httprpc.RelationActionReq{
		UserId:     res,
		ToUserId:   req.ToUserID,
		ActionType: req.ActionType,
	})

	resp.StatusCode = rpcResp.StatusCode
	resp.StatusMsg = &rpcResp.StatusMsg
	c.JSON(consts.StatusOK, resp)
}

// RelationFollowListMethod .
// @router /douyin/relation/follow/list/ [POST]
func RelationFollowListMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req http.RelationFollowListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(http.RelationFollowListResp)

	res, err := jwt.AuthToken(ctx, c)
	if err != nil || res == -1 { // token校验失败
		msg := "auth fail"
		resp.StatusCode = 2
		resp.StatusMsg = &msg
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	rpcResp, err := rpc.RelationClient.FollowListMethod(ctx, &httprpc.FollowListReq{UserId: req.UserID})
	if err != nil {
		msg := "get follow list info fail"
		resp.StatusCode = 3
		resp.StatusMsg = &msg
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	resp.StatusCode = rpcResp.StatusCode
	resp.StatusMsg = &rpcResp.StatusMsg
	users, _ := rpc.PackUsers(rpcResp.UserList)

	resp.UserList = users

	c.JSON(consts.StatusOK, resp)
}

// RelationFollowerListMethod .
// @router /douyin/relation/follower/list/ [POST]
func RelationFollowerListMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req http.RelationFollowerListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(http.RelationFollowerListResp)

	res, err := jwt.AuthToken(ctx, c)
	if err != nil || res == -1 { // token校验失败
		msg := "auth fail"
		resp.StatusCode = 2
		resp.StatusMsg = &msg
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	rpcResp, err := rpc.RelationClient.FollowerListMethod(ctx, &httprpc.FollowerListReq{UserId: req.UserID})
	resp.StatusCode = rpcResp.StatusCode
	resp.StatusMsg = &rpcResp.StatusMsg
	if err != nil {
		resp.StatusCode = rpcResp.StatusCode
		resp.StatusMsg = &rpcResp.StatusMsg
		c.JSON(consts.StatusOK, resp)
		return
	}
	resp.StatusCode = rpcResp.StatusCode
	resp.StatusMsg = &rpcResp.StatusMsg

	users, err := rpc.PackUsers(rpcResp.UserList)

	resp.UserList = users

	c.JSON(consts.StatusOK, resp)
}

// RelationFriendListMethod .
// @router /douyin/relation/friend/list/ [POST]
func RelationFriendListMethod(ctx context.Context, c *app.RequestContext) {
	var err error
	var req http.RelationFriendListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(http.RelationFriendListResp)

	res, err := jwt.AuthToken(ctx, c)
	if err != nil || res == -1 { // token校验失败
		msg := "auth fail"
		resp.StatusCode = 2
		resp.StatusMsg = &msg
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	rpcResp, err := rpc.RelationClient.FriendListMethod(ctx, &httprpc.FriendListReq{UserId: req.UserID})
	if err != nil {
		msg := "auth fail"
		resp.StatusCode = 2
		resp.StatusMsg = &msg
		c.JSON(consts.StatusOK, resp)
		return
	}

	frineds := rpc.PackFriends(rpcResp.UserList)

	resp.StatusCode = rpcResp.StatusCode
	resp.StatusMsg = &rpcResp.StatusMsg
	resp.UserList = frineds

	c.JSON(consts.StatusOK, resp)
}
