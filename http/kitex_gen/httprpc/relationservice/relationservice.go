// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	httprpc "douyinProject/http/kitex_gen/httprpc"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*httprpc.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"RelationActionMethod": kitex.NewMethodInfo(relationActionMethodHandler, newRelationServiceRelationActionMethodArgs, newRelationServiceRelationActionMethodResult, false),
		"FollowListMethod":     kitex.NewMethodInfo(followListMethodHandler, newRelationServiceFollowListMethodArgs, newRelationServiceFollowListMethodResult, false),
		"FollowerListMethod":   kitex.NewMethodInfo(followerListMethodHandler, newRelationServiceFollowerListMethodArgs, newRelationServiceFollowerListMethodResult, false),
		"FriendListMethod":     kitex.NewMethodInfo(friendListMethodHandler, newRelationServiceFriendListMethodArgs, newRelationServiceFriendListMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "httprpc",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*httprpc.RelationServiceRelationActionMethodArgs)
	realResult := result.(*httprpc.RelationServiceRelationActionMethodResult)
	success, err := handler.(httprpc.RelationService).RelationActionMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationActionMethodArgs() interface{} {
	return httprpc.NewRelationServiceRelationActionMethodArgs()
}

func newRelationServiceRelationActionMethodResult() interface{} {
	return httprpc.NewRelationServiceRelationActionMethodResult()
}

func followListMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*httprpc.RelationServiceFollowListMethodArgs)
	realResult := result.(*httprpc.RelationServiceFollowListMethodResult)
	success, err := handler.(httprpc.RelationService).FollowListMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceFollowListMethodArgs() interface{} {
	return httprpc.NewRelationServiceFollowListMethodArgs()
}

func newRelationServiceFollowListMethodResult() interface{} {
	return httprpc.NewRelationServiceFollowListMethodResult()
}

func followerListMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*httprpc.RelationServiceFollowerListMethodArgs)
	realResult := result.(*httprpc.RelationServiceFollowerListMethodResult)
	success, err := handler.(httprpc.RelationService).FollowerListMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceFollowerListMethodArgs() interface{} {
	return httprpc.NewRelationServiceFollowerListMethodArgs()
}

func newRelationServiceFollowerListMethodResult() interface{} {
	return httprpc.NewRelationServiceFollowerListMethodResult()
}

func friendListMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*httprpc.RelationServiceFriendListMethodArgs)
	realResult := result.(*httprpc.RelationServiceFriendListMethodResult)
	success, err := handler.(httprpc.RelationService).FriendListMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceFriendListMethodArgs() interface{} {
	return httprpc.NewRelationServiceFriendListMethodArgs()
}

func newRelationServiceFriendListMethodResult() interface{} {
	return httprpc.NewRelationServiceFriendListMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationActionMethod(ctx context.Context, request *httprpc.RelationActionReq) (r *httprpc.RelationActionResp, err error) {
	var _args httprpc.RelationServiceRelationActionMethodArgs
	_args.Request = request
	var _result httprpc.RelationServiceRelationActionMethodResult
	if err = p.c.Call(ctx, "RelationActionMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowListMethod(ctx context.Context, request *httprpc.FollowListReq) (r *httprpc.FollowListResp, err error) {
	var _args httprpc.RelationServiceFollowListMethodArgs
	_args.Request = request
	var _result httprpc.RelationServiceFollowListMethodResult
	if err = p.c.Call(ctx, "FollowListMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerListMethod(ctx context.Context, request *httprpc.FollowerListReq) (r *httprpc.FollowerListResp, err error) {
	var _args httprpc.RelationServiceFollowerListMethodArgs
	_args.Request = request
	var _result httprpc.RelationServiceFollowerListMethodResult
	if err = p.c.Call(ctx, "FollowerListMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendListMethod(ctx context.Context, request *httprpc.FriendListReq) (r *httprpc.FriendListResp, err error) {
	var _args httprpc.RelationServiceFriendListMethodArgs
	_args.Request = request
	var _result httprpc.RelationServiceFriendListMethodResult
	if err = p.c.Call(ctx, "FriendListMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
