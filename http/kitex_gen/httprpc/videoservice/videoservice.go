// Code generated by Kitex v0.4.4. DO NOT EDIT.

package videoservice

import (
	"context"
	httprpc "douyinProject/http/kitex_gen/httprpc"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*httprpc.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FeedMethod":          kitex.NewMethodInfo(feedMethodHandler, newVideoServiceFeedMethodArgs, newVideoServiceFeedMethodResult, false),
		"PublishActionMethod": kitex.NewMethodInfo(publishActionMethodHandler, newVideoServicePublishActionMethodArgs, newVideoServicePublishActionMethodResult, false),
		"PublishListMethod":   kitex.NewMethodInfo(publishListMethodHandler, newVideoServicePublishListMethodArgs, newVideoServicePublishListMethodResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "httprpc",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func feedMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*httprpc.VideoServiceFeedMethodArgs)
	realResult := result.(*httprpc.VideoServiceFeedMethodResult)
	success, err := handler.(httprpc.VideoService).FeedMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFeedMethodArgs() interface{} {
	return httprpc.NewVideoServiceFeedMethodArgs()
}

func newVideoServiceFeedMethodResult() interface{} {
	return httprpc.NewVideoServiceFeedMethodResult()
}

func publishActionMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*httprpc.VideoServicePublishActionMethodArgs)
	realResult := result.(*httprpc.VideoServicePublishActionMethodResult)
	success, err := handler.(httprpc.VideoService).PublishActionMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishActionMethodArgs() interface{} {
	return httprpc.NewVideoServicePublishActionMethodArgs()
}

func newVideoServicePublishActionMethodResult() interface{} {
	return httprpc.NewVideoServicePublishActionMethodResult()
}

func publishListMethodHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*httprpc.VideoServicePublishListMethodArgs)
	realResult := result.(*httprpc.VideoServicePublishListMethodResult)
	success, err := handler.(httprpc.VideoService).PublishListMethod(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishListMethodArgs() interface{} {
	return httprpc.NewVideoServicePublishListMethodArgs()
}

func newVideoServicePublishListMethodResult() interface{} {
	return httprpc.NewVideoServicePublishListMethodResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FeedMethod(ctx context.Context, request *httprpc.FeedReq) (r *httprpc.FeedResp, err error) {
	var _args httprpc.VideoServiceFeedMethodArgs
	_args.Request = request
	var _result httprpc.VideoServiceFeedMethodResult
	if err = p.c.Call(ctx, "FeedMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishActionMethod(ctx context.Context, request *httprpc.PublishActionReq) (r *httprpc.PublishActionResp, err error) {
	var _args httprpc.VideoServicePublishActionMethodArgs
	_args.Request = request
	var _result httprpc.VideoServicePublishActionMethodResult
	if err = p.c.Call(ctx, "PublishActionMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishListMethod(ctx context.Context, request *httprpc.PublishListReq) (r *httprpc.PublishListResp, err error) {
	var _args httprpc.VideoServicePublishListMethodArgs
	_args.Request = request
	var _result httprpc.VideoServicePublishListMethodResult
	if err = p.c.Call(ctx, "PublishListMethod", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
